package org.posl.compiler.syntax.javalang;

import org.posl.compiler.syntax.Symbol;

/**
 * <p>
 * This is an enumeration of Java-syntax non-terminal symbols.
 * JavaSE 17 specification:
 * https://docs.oracle.com/javase/specs/jls/se17/jls17.pdf
 * </p>
 */

public enum JavaNTS implements Symbol{

    //Symbols from section 3(Lexical Structure):
    IDENTIFIER,
    TYPE_IDENTIFIER,
    UNQUALIFIED_METHOD_IDENTIFIER,
    LITERAL,
    BOOLEAN_LITERAL,
    NULL_LITERAL,

    //Symbols from section 4(Types, Values, and Variables):
    TYPE,
    PRIMITIVE_TYPE,
    NUMERIC_TYPE,
    INTEGRAL_TYPE,
    FLOATING_POINT_TYPE,
    REFERENCE_TYPE,
    CLASS_OR_INTERFACE_TYPE,
    CLASS_TYPE,
    INTERFACE_TYPE,
    TYPE_VARIABLE,
    ARRAY_TYPE,
    DIMS,
    TYPE_PARAMETER,
    TYPE_PARAMETER_MODIFIER,
    TYPE_BOUND,
    ADDITIONAL_BOUND,
    TYPE_ARGUMENTS,
    TYPE_ARGUMENT_LIST,
    TYPE_ARGUMENT,
    WILDCARD,
    WILDCARD_BOUNDS,

    //Symbols from section 6(Names):
    MODULE_NAME,
    PACKAGE_NAME,
    TYPE_NAME,
    EXPRESSION_NAME,
    METHOD_NAME,
    PACKAGE_OR_TYPE_NAME,
    AMBIGUOUS_NAME,

    //Symbols from section 7(Lexical Structure):
    COMPILATION_UNIT,
    ORDINARY_COMPILATION_UNIT,
    MODULAR_COMPILATION_UNIT,
    PACKAGE_DECLARATION,
    PACKAGE_MODIFIER,
    IMPORT_DECLARATION,
    SINGLE_TYPE_IMPORT_DECLARATION,
    TYPE_IMPORT_ON_DEMAND_DECLARATION,
    SINGLE_STATIC_IMPORT_DECLARATION,
    STATIC_IMPORT_ON_DEMAND_DECLARATION,
    TOP_LEVEL_CLASS_OR_INTERFACE_DECLARATION,
    MODULE_DECLARATION,
    MODULE_DIRECTIVE,
    REQUIRES_MODIFIER,

    //Symbols from section 8(Classes):
    CLASS_DECLARATION,
    NORMAL_CLASS_DECLARATION,
    CLASS_MODIFIER,
    TYPE_PARAMETERS,
    TYPE_PARAMETER_LIST,
    CLASS_EXTENDS,
    CLASS_IMPLEMENTS,
    INTERFACE_TYPE_LIST,
    CLASS_PERMITS,
    CLASS_BODY,
    CLASS_BODY_DECLARATION,
    CLASS_MEMBER_DECLARATION,
    FIELD_DECLARATION,
    FIELD_MODIFIER,
    VARIABLE_DECLARATOR_LIST,
    VARIABLE_DECLARATOR,
    VARIABLE_DECLARATOR_ID,
    VARIABLE_INITIALIZER,
    UNANN_TYPE,
    UNANN_PRIMITIVE_TYPE,
    UNANN_REFERENCE_TYPE,
    UNANN_CLASS_OR_INTERFACE_TYPE,
    UNANN_CLASS_TYPE,
    UNANN_INTERFACE_TYPE,
    UNANN_TYPE_VARIABLE,
    UNANN_ARRAY_TYPE,
    METHOD_DECLARATION,
    METHOD_MODIFIER,
    METHOD_HEADER,
    RESULT,
    METHOD_DECLARATOR,
    RECEIVER_PARAMETER,
    FORMAL_PARAMETER_LIST,
    FORMAL_PARAMETER,
    VARIABLE_ARITY_PARAMETER,
    VARIABLE_MODIFIER,
    THROWS,
    EXCEPTION_TYPE_LIST,
    EXCEPTION_TYPE,
    METHOD_BODY,
    INSTANCE_INITIALIZER,
    STATIC_INITIALIZER,
    CONSTRUCTOR_DECLARATION,
    CONSTRUCTOR_MODIFIER,
    CONSTRUCTOR_DECLARATOR,
    SIMPLE_TYPE_NAME,
    CONSTRUCTOR_BODY,
    EXPLICIT_CONSTRUCTOR_INVOCATION,
    ENUM_DECLARATION,
    ENUM_BODY,
    ENUM_CONSTANT_LIST,
    ENUM_CONSTANT,
    ENUM_CONSTANT_MODIFIER,
    ENUM_BODY_DECLARATIONS,
    RECORD_DECLARATION,
    RECORD_HEADER,
    RECORD_COMPONENT_LIST,
    RECORD_COMPONENT,
    VARIABLE_ARITY_RECORD_COMPONENT,
    RECORD_COMPONENT_MODIFIER,
    RECORD_BODY,
    RECORD_BODY_DECLARATION,
    COMPACT_CONSTRUCTOR_DECLARATION,

    //Symbols from section 9(Interfaces):
    INTERFACE_DECLARATION,
    NORMAL_INTERFACE_DECLARATION,
    INTERFACE_MODIFIER,
    INTERFACE_EXTENDS,
    INTERFACE_PERMITS,
    INTERFACE_BODY,
    INTERFACE_MEMBER_DECLARATION,
    CONSTANT_DECLARATION,
    CONSTANT_MODIFIER,
    INTERFACE_METHOD_DECLARATION,
    INTERFACE_METHOD_MODIFIER,
    ANNOTATION_INTERFACE_DECLARATION,
    ANNOTATION_INTERFACE_BODY,
    ANNOTATION_INTERFACE_MEMBER_DECLARATION,
    ANNOTATION_INTERFACE_ELEMENT_DECLARATION,
    ANNOTATION_INTERFACE_ELEMENT_MODIFIER,
    DEFAULT_VALUE,
    ANNOTATION,
    NORMAL_ANNOTATION,
    ELEMENT_VALUE_PAIR_LIST,
    ELEMENT_VALUE_PAIR,
    ELEMENT_VALUE,
    ELEMENT_VALUE_ARRAY_INITIALIZER,
    ELEMENT_VALUE_LIST,
    MARKER_ANNOTATION,
    SINGLE_ELEMENT_ANNOTATION,

    //Symbols from section 10(Arrays):
    ARRAY_INITIALIZER,
    VARIABLE_INITIALIZER_LIST,

    //Symbols from section 14(Blocks, Statements, and Patterns):
    BLOCK,
    BLOCK_STATEMENTS,
    BLOCK_STATEMENT,
    LOCAL_CLASS_OR_INTERFACE_DECLARATION,
    LOCAL_VARIABLE_DECLARATION_STATEMENT,
    LOCAL_VARIABLE_DECLARATION,
    LOCAL_VARIABLE_TYPE,
    STATEMENT,
    STATEMENT_NO_SHORT_IF,
    STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT,
    EMPTY_STATEMENT,
    LABELED_STATEMENT,
    LABELED_STATEMENT_NO_SHORT_IF,
    EXPRESSION_STATEMENT,
    STATEMENT_EXPRESSION,
    IF_THEN_STATEMENT,
    IF_THEN_ELSE_STATEMENT,
    IF_THEN_ELSE_STATEMENT_NO_SHORT_IF,
    ASSERT_STATEMENT,
    SWITCH_STATEMENT,
    SWITCH_BLOCK,
    SWITCH_RULE,
    SWITCH_BLOCK_STATEMENT_GROUP,
    SWITCH_LABEL,
    CASE_CONSTANT,
    WHILE_STATEMENT,
    WHILE_STATEMENT_NO_SHORT_IF,
    DO_STATEMENT,
    FOR_STATEMENT,
    FOR_STATEMENT_NO_SHORT_IF,
    BASIC_FOR_STATEMENT,
    BASIC_FOR_STATEMENT_NO_SHORT_IF,
    FOR_INIT,
    FOR_UPDATE,
    STATEMENT_EXPRESSION_LIST,
    ENHANCED_FOR_STATEMENT,
    ENHANCED_FOR_STATEMENT_NO_SHORT_IF,
    BREAK_STATEMENT,
    YIELD_STATEMENT,
    CONTINUE_STATEMENT,
    RETURN_STATEMENT,
    THROW_STATEMENT,
    SYNCHRONIZED_STATEMENT,
    TRY_STATEMENT,
    CATCHES,
    CATCH_CLAUSE,
    CATCH_FORMAL_PARAMETER,
    CATCH_TYPE,
    FINALLY,
    TRY_WITH_RESOURCES_STATEMENT,
    RESOURCE_SPECIFICATION,
    RESOURCE_LIST,
    RESOURCE,
    VARIABLE_ACCESS,
    PATTERN,
    TYPE_PATTERN,

    //Symbols from section 15(Expressions):
    PRIMARY,
    PRIMARY_NO_NEW_ARRAY,
    CLASS_LITERAL,
    CLASS_INSTANCE_CREATION_EXPRESSION,
    UNQUALIFIED_CLASS_INSTANCE_CREATION_EXPRESSION,
    CLASS_OR_INTERFACE_TYPE_TO_INSTANTIATE,
    TYPE_ARGUMENTS_OR_DIAMOND,
    FIELD_ACCESS,
    ARRAY_ACCESS,
    METHOD_INVOCATION,
    ARGUMENT_LIST,
    METHOD_REFERENCE,
    ARRAY_CREATION_EXPRESSION,
    DIM_EXPRS,
    DIM_EXPR,
    EXPRESSION,
    LAMBDA_EXPRESSION,
    LAMBDA_PARAMETERS,
    LAMBDA_PARAMETER_LIST,
    LAMBDA_PARAMETER,
    LAMBDA_PARAMETER_TYPE,
    LAMBDA_BODY,
    ASSIGNMENT_EXPRESSION,
    ASSIGNMENT,
    LEFT_HAND_SIDE,
    ASSIGNMENT_OPERATOR,
    CONDITIONAL_EXPRESSION,
    CONDITIONAL_OR_EXPRESSION,
    CONDITIONAL_AND_EXPRESSION,
    INCLUSIVE_OR_EXPRESSION,
    EXCLUSIVE_OR_EXPRESSION,
    AND_EXPRESSION,
    EQUALITY_EXPRESSION,
    RELATIONAL_EXPRESSION,
    INSTANCE_OF_EXPRESSION,
    SHIFT_EXPRESSION,
    ADDITIVE_EXPRESSION,
    MULTIPLICATIVE_EXPRESSION,
    UNARY_EXPRESSION,
    PRE_INCREMENT_EXPRESSION,
    PRE_DECREMENT_EXPRESSION,
    UNARY_EXPRESSION_NOT_PLUS_MINUS,
    POSTFIX_EXPRESSION,
    POST_INCREMENT_EXPRESSION,
    POST_DECREMENT_EXPRESSION,
    CAST_EXPRESSION,
    SWITCH_EXPRESSION,
    CONSTANT_EXPRESSION,
    
    //Introduced symbols
    NAME,
    SIMPLE_NAME,
    QUALIFIED_NAME,
    MODIFIER;

    @Override
    public String key() {
        return "$" + name() + "$";
    }
}
